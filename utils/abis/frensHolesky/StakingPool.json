{
  "address": "0xC50e791f4313b5521C33BAa55393DF8f76A14B66",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ammount",
          "type": "uint256"
        }
      ],
      "name": "AddToDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "DepositToPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_pubKey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_withdrawal_credentials",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_deposit_data_root",
          "type": "bytes32"
        }
      ],
      "name": "SetPubKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "addToDeposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artForPool",
      "outputs": [
        {
          "internalType": "contract IFrensArt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "callSSVNetwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentState",
      "outputs": [
        {
          "internalType": "enum StakingPool.PoolState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositContract",
      "outputs": [
        {
          "internalType": "contract IDepositContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositForId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit_data_root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "frenPastClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frensPoolShare",
      "outputs": [
        {
          "internalType": "contract IFrensPoolShare",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frensStorage",
      "outputs": [
        {
          "internalType": "contract IFrensStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getDistributableShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIdsInThisPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getState",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idsInPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "validatorLocked_",
          "type": "bool"
        },
        {
          "internalType": "contract IFrensStorage",
          "name": "frensStorage_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pubKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rageQuitInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "rageQuitting",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFrensArt",
          "name": "newArtContract",
          "type": "address"
        }
      ],
      "name": "setArt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_pubKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_withdrawal_credentials",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_deposit_data_root",
          "type": "bytes32"
        }
      ],
      "name": "setPubKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signature",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_pubKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_withdrawal_credentials",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_deposit_data_root",
          "type": "bytes32"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawal_credentials",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbe474b74f4116cb0cf5e7984c3380c24f0df245ab2737340583b09688339b6dd",
  "receipt": {
    "to": null,
    "from": "0x6C55105954b7fd0c4Bf3df00dFD739fA71e2fD20",
    "contractAddress": "0xC50e791f4313b5521C33BAa55393DF8f76A14B66",
    "transactionIndex": 39,
    "gasUsed": "2708497",
    "logsBloom": "0x
    "blockHash": "0x1ba076b481fde33e413528580e269c07eae20f49f950f322bfe40b2dc4229443",
    "transactionHash": "0xbe474b74f4116cb0cf5e7984c3380c24f0df245ab2737340583b09688339b6dd",
    "logs": [],
    "blockNumber": 959728,
    "cumulativeGasUsed": "12484208",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "93f0ca858448e8c3afb9cbb83a414dd8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ammount\",\"type\":\"uint256\"}],\"name\":\"AddToDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DepositToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_pubKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_withdrawal_credentials\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"SetPubKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artForPool\",\"outputs\":[{\"internalType\":\"contract IFrensArt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callSSVNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"internalType\":\"enum StakingPool.PoolState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositContract\",\"outputs\":[{\"internalType\":\"contract IDepositContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositForId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit_data_root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frenPastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frensPoolShare\",\"outputs\":[{\"internalType\":\"contract IFrensPoolShare\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frensStorage\",\"outputs\":[{\"internalType\":\"contract IFrensStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDistributableShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdsInThisPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idsInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"validatorLocked_\",\"type\":\"bool\"},{\"internalType\":\"contract IFrensStorage\",\"name\":\"frensStorage_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pubKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rageQuitInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rageQuitting\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFrensArt\",\"name\":\"newArtContract\",\"type\":\"address\"}],\"name\":\"setArt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"setPubKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawal_credentials\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"addToDeposit(uint256)\":{\"details\":\"recieves funds and increases deposit for a FrensPoolShare ID\"},\"claim(uint256)\":{\"details\":\"calculates the rewards due to `_id` and sends them to the owner of `_id`\"},\"depositToPool()\":{\"details\":\"recieves funds and returns FrenspoolShare NFT\"},\"getDistributableShare(uint256)\":{\"details\":\"this is used for the traits in the NFT\",\"returns\":{\"_0\":\"the share of the validator rewards climable by `_id` minus fees. Returns 0 if pool is still accepting deposits\"}},\"getShare(uint256)\":{\"returns\":{\"_0\":\"the share of the validator rewards climable by `_id`\"}},\"getState()\":{\"returns\":{\"_0\":\"pool state\"}},\"initialize(address,bool,address)\":{\"details\":\"when the pool is initalised by the factory, the owner, art contract,  storage contract, and if the validator is locked are all set.  The pool state is set according to whether or not the validator is locked.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setArt(address)\":{\"details\":\"allows pool owner to change the art for the NFTs in the pool\"},\"setPubKey(bytes,bytes,bytes,bytes32)\":{\"details\":\"sets the validator info required when depositing to the deposit contract\"},\"stake()\":{\"details\":\"stakes 32 ETH from this pool to the deposit contract. validator info must already be entered\"},\"stake(bytes,bytes,bytes,bytes32)\":{\"details\":\"stakes 32 ETH from this pool to the deposit contract, accepts validator info\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256,uint256)\":{\"details\":\"allows user to withdraw funds if they have not yet been deposited to the deposit contract with the Stake method\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToDeposit(uint256)\":{\"notice\":\"allows a user to add funds to an existing NFT ID\"},\"claim(uint256)\":{\"notice\":\"allows user to claim their portion of the rewards\"},\"depositToPool()\":{\"notice\":\"This allows a user to deposit funds to the pool, and recieve an NFT representing their share\"},\"withdraw(uint256,uint256)\":{\"notice\":\"To withdraw funds previously deposited - ONLY works before the funds are staked. Use Claim to get rewards.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPool.sol\":\"StakingPool\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\",\"keccak256\":\"0xf0f689f041c9970ece22ba42dc66cacf2aee78699e1eab26658becb738322356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"pragma solidity 0.8.20;\\n//SPDX-License-Identifier: MIT\\n\\n///@title Frens Staking Pool Contract\\n///@author 0xWildhare and the FRENS team\\n///@dev A new instance of this contract is created everytime a user makes a new pool\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\nimport \\\"./interfaces/IFrensPoolShare.sol\\\";\\nimport \\\"./interfaces/IStakingPool.sol\\\";\\nimport \\\"./interfaces/IFrensArt.sol\\\";\\nimport \\\"./interfaces/IFrensOracle.sol\\\";\\nimport \\\"./interfaces/IFrensStorage.sol\\\";\\n\\ncontract StakingPool is IStakingPool, OwnableUpgradeable{\\n    event Stake(address depositContractAddress, address caller);\\n    event DepositToPool(uint amount, address depositer, uint id);\\n    event AddToDeposit(uint id, uint ammount);\\n    event SetPubKey(\\n        bytes _pubKey,\\n        bytes _withdrawal_credentials,\\n        bytes _signature,\\n        bytes32 _deposit_data_root\\n    );\\n    event Withdraw(uint id, uint amount, address recipient);\\n    event Claim(uint id, uint amount, address recipient);\\n\\n\\n    modifier noZeroValueTxn() {\\n        require(msg.value > 0, \\\"must deposit ether\\\");\\n        _;\\n    }\\n\\n    modifier maxTotDep() {\\n        require(\\n            msg.value + totalDeposits <= 32 ether,\\n            \\\"total deposits cannot be more than 32 Eth\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier mustBeAccepting() {\\n        require(\\n            currentState == PoolState.acceptingDeposits,\\n            \\\"not accepting deposits\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier correctPoolOnly(uint _id) {\\n        require(\\n            frensPoolShare.poolByIds(_id) == address(this),\\n            \\\"wrong staking pool for id\\\"\\n        );\\n        _;\\n    }\\n\\n    enum PoolState {\\n        awaitingValidatorInfo,\\n        acceptingDeposits,\\n        staked,\\n        exited\\n    }\\n    PoolState public currentState;\\n    \\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    struct RageQuit {\\n        uint price;\\n        uint time;\\n        bool rageQuitting;\\n    }\\n\\n    //maps the ID for each FrensPoolShare NFT in the pool to the deposit for that share\\n    mapping(uint => uint) public depositForId;\\n    //maps each ID to the rewards it has already claimed (used in calculating the claimable rewards)\\n    mapping(uint => uint) public frenPastClaim;\\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    mapping(uint => bool) public locked; //transfer locked (must use ragequit)\\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    mapping(uint => RageQuit) public rageQuitInfo;\\n\\n    //total eth deposited to pool by users (does not include attestation or block rewards)\\n    uint public totalDeposits;\\n    //total amount of rewards claimed from pool (used in calculating the claimable rewards)\\n    uint public totalClaims;\\n    //these are the ids which have deposits in this pool\\n    uint[] public idsInPool;\\n    //fee % for protocol (extracted when claiming rewards from un-exited pool)\\n    uint public feePercent;\\n\\n    //this is set in the constructor and requires the validator public key and other validator info be set before deposits can be made\\n    //also, if the validator is locked, once set, the pool owner cnnot change the validator pubkey and other info\\n    bool public validatorLocked;\\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    bool public transferLocked;\\n    //set as true once the validator info has been set for the pool\\n    bool public validatorSet;\\n\\n    //validator public key for pool\\n    bytes public pubKey;\\n    //validator withdrawal credentials - must be set to pool address\\n    bytes public withdrawal_credentials;\\n    //bls signature for validator\\n    bytes public signature;\\n    //deposit data root for validator\\n    bytes32 public deposit_data_root;\\n\\n    //feeRecipient address will be the FRENS multisig until there is a dao\\n    address public feeRecipient;\\n\\n    IFrensPoolShare public frensPoolShare;\\n    IFrensArt public artForPool;\\n    IFrensStorage public frensStorage;\\n    IDepositContract public depositContract;\\n\\n    /**@dev when the pool is initalised by the factory, the owner, art contract, \\n    *storage contract, and if the validator is locked are all set. \\n    *The pool state is set according to whether or not the validator is locked.\\n    */\\n    function initialize(\\n        address owner_,\\n        bool validatorLocked_,\\n        IFrensStorage frensStorage_\\n    ) public initializer() {\\n        require(owner_ != address(0), \\\"FRENS contract error no owner address set\\\");\\n        __Ownable_init(owner_);\\n        require(address(frensStorage_) != address(0), \\\"FRENS contract error no storage address set\\\");\\n        frensStorage = frensStorage_;\\n        address artAddress = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensArt\\\")));\\n        require(artAddress != address(0), \\\"FRENS contract error no art address set\\\");\\n        artForPool = IFrensArt(artAddress);\\n        address frensPoolShareAddress = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensPoolShare\\\")));\\n        require(artAddress != address(0), \\\"FRENS contract error no pool share address set\\\");\\n        frensPoolShare = IFrensPoolShare(frensPoolShareAddress);\\n        address depositContractAddress = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"external.contract.address\\\", \\\"DepositContract\\\")));\\n        require(depositContractAddress != address(0), \\\"FRENS contract error no Deposit contract set\\\");\\n        depositContract = IDepositContract(depositContractAddress);\\n        feePercent = frensStorage.getUint(keccak256(abi.encodePacked(\\\"protocol.fee.percent\\\")));\\n        require(feePercent <= 10, \\\"FRENS contract error fee too high\\\");\\n        feeRecipient = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"protocol.fee.recipient\\\")));\\n        require(feeRecipient != address(0), \\\"FRENS contract error no fee recipient set\\\");\\n        validatorLocked = validatorLocked_;\\n        if (validatorLocked) {\\n            currentState = PoolState.awaitingValidatorInfo;\\n        } else {\\n            currentState = PoolState.acceptingDeposits;\\n        }\\n        \\n        address ssvTokenAddress = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"external.contract.address\\\", \\\"SSVToken\\\")));\\n        require(ssvTokenAddress != address(0), \\\"FRENS contract error no SSV token contract set\\\");        \\n        address ssvNetwork = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"external.contract.address\\\", \\\"SSVNetwork\\\")));\\n        require(ssvNetwork != address(0), \\\"FRENS contract error no SSV network contract address set\\\");        \\n        IERC20(ssvTokenAddress).approve(ssvNetwork,type(uint256).max);\\n\\n        _transferOwnership(owner_);\\n    }\\n\\n    ///@notice This allows a user to deposit funds to the pool, and recieve an NFT representing their share\\n    ///@dev recieves funds and returns FrenspoolShare NFT\\n    function depositToPool()\\n        external\\n        payable\\n        noZeroValueTxn\\n        mustBeAccepting\\n        maxTotDep\\n    {\\n        uint id = frensPoolShare.totalSupply();\\n        depositForId[id] = msg.value;\\n        totalDeposits += msg.value;\\n        idsInPool.push(id);\\n        frenPastClaim[id] = 1; //this avoids future rounding errors in rewardclaims\\n        locked[id] = transferLocked;\\n        frensPoolShare.mint(msg.sender); //mint nft\\n        emit DepositToPool(msg.value, msg.sender, id);\\n    }\\n\\n    ///@notice allows a user to add funds to an existing NFT ID\\n    ///@dev recieves funds and increases deposit for a FrensPoolShare ID\\n    function addToDeposit(uint _id) external payable mustBeAccepting maxTotDep correctPoolOnly(_id){\\n        require(frensPoolShare.exists(_id), \\\"id does not exist\\\"); //id must exist\\n        depositForId[_id] += msg.value;\\n        totalDeposits += msg.value;\\n        emit AddToDeposit(_id, msg.value);\\n    }\\n\\n    ///@dev stakes 32 ETH from this pool to the deposit contract, accepts validator info\\n    function stake(\\n        bytes calldata _pubKey,\\n        bytes calldata _withdrawal_credentials,\\n        bytes calldata _signature,\\n        bytes32 _deposit_data_root\\n    ) external onlyOwner {\\n        //if validator info has previously been entered, check that it is the same, then stake\\n        if (validatorSet) {\\n            require(keccak256(_pubKey) == keccak256(pubKey), \\\"pubKey mismatch\\\");\\n        } else {\\n            //if validator info has not previously been entered, enter it, then stake\\n            _setPubKey(\\n                _pubKey,\\n                _withdrawal_credentials,\\n                _signature,\\n                _deposit_data_root\\n            );\\n        }\\n        _stake();\\n    }\\n\\n    ///@dev stakes 32 ETH from this pool to the deposit contract. validator info must already be entered\\n    function stake() external onlyOwner {\\n        _stake();\\n    }\\n\\n    function _stake() internal {\\n        require(address(this).balance >= 32 ether, \\\"not enough eth\\\");\\n        require(totalDeposits == 32 ether, \\\"not enough deposits\\\");\\n        require(currentState == PoolState.acceptingDeposits, \\\"wrong state\\\");\\n        require(validatorSet, \\\"validator not set\\\");\\n        currentState = PoolState.staked;\\n        depositContract.deposit{value: 32 ether}(\\n            pubKey,\\n            withdrawal_credentials,\\n            signature,\\n            deposit_data_root\\n        );\\n        emit Stake(address(depositContract), msg.sender);\\n    }\\n\\n    ///@dev sets the validator info required when depositing to the deposit contract\\n    function setPubKey(\\n        bytes calldata _pubKey,\\n        bytes calldata _withdrawal_credentials,\\n        bytes calldata _signature,\\n        bytes32 _deposit_data_root\\n    ) external onlyOwner {\\n        _setPubKey(\\n            _pubKey,\\n            _withdrawal_credentials,\\n            _signature,\\n            _deposit_data_root\\n        );\\n    }\\n\\n    function _setPubKey(\\n        bytes calldata _pubKey,\\n        bytes calldata _withdrawal_credentials,\\n        bytes calldata _signature,\\n        bytes32 _deposit_data_root\\n    ) internal {\\n        //get expected withdrawal_credentials based on contract address\\n        bytes memory withdrawalCredFromAddr = _toWithdrawalCred(address(this));\\n        //compare expected withdrawal_credentials to provided\\n        require(\\n            keccak256(_withdrawal_credentials) ==\\n                keccak256(withdrawalCredFromAddr),\\n            \\\"withdrawal credential mismatch\\\"\\n        );\\n        if (validatorLocked) {\\n            require(currentState == PoolState.awaitingValidatorInfo, \\\"wrong state\\\");\\n            assert(!validatorSet); //this should never fail\\n            currentState = PoolState.acceptingDeposits;\\n        }\\n        require(currentState == PoolState.acceptingDeposits, \\\"wrong state\\\");\\n        pubKey = _pubKey;\\n        withdrawal_credentials = _withdrawal_credentials;\\n        signature = _signature;\\n        deposit_data_root = _deposit_data_root;\\n        validatorSet = true;\\n        emit SetPubKey(_pubKey, _withdrawal_credentials, _signature, _deposit_data_root);\\n    }\\n\\n    ///@notice To withdraw funds previously deposited - ONLY works before the funds are staked. Use Claim to get rewards.\\n    ///@dev allows user to withdraw funds if they have not yet been deposited to the deposit contract with the Stake method\\n    function withdraw(uint _id, uint _amount) external mustBeAccepting {\\n        require(msg.sender == frensPoolShare.ownerOf(_id), \\\"not the owner\\\");\\n        require(depositForId[_id] >= _amount, \\\"not enough deposited\\\");\\n        depositForId[_id] -= _amount;\\n        totalDeposits -= _amount;\\n        (bool success, /*return data*/) = frensPoolShare.ownerOf(_id).call{value: _amount}(\\\"\\\");\\n        assert(success);\\n        emit Withdraw(_id, _amount, msg.sender);\\n    }\\n\\n    ///@notice allows user to claim their portion of the rewards\\n    ///@dev calculates the rewards due to `_id` and sends them to the owner of `_id`\\n    function claim(uint _id) external correctPoolOnly(_id){\\n        require(\\n            currentState != PoolState.acceptingDeposits,\\n            \\\"use withdraw when not staked\\\"\\n        );\\n        require(\\n            address(this).balance > 100,\\n            \\\"must be greater than 100 wei to claim\\\"\\n        );\\n        //has the validator exited?\\n        bool exited;\\n        if (currentState != PoolState.exited) {\\n            IFrensOracle frensOracle = IFrensOracle(frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensOracle\\\"))));\\n            exited = frensOracle.checkValidatorState(address(this));\\n            if (exited && currentState == PoolState.staked ){\\n                currentState = PoolState.exited;\\n            }\\n        } else exited = true;\\n        //get share for id\\n        uint amount = _getShare(_id);\\n        //claim\\n        frenPastClaim[_id] += amount;\\n        totalClaims += amount;\\n        //fee? not applied to exited\\n        if (feePercent > 0 && !exited) {\\n            uint feeAmount = (feePercent * amount) / 100;\\n            if (feeAmount > 1){ \\n                (bool success1, /*return data*/) = feeRecipient.call{value: feeAmount - 1}(\\\"\\\"); //-1 wei to avoid rounding error issues\\n                assert(success1);\\n            }\\n            amount = amount - feeAmount;\\n        }\\n        address recipient = frensPoolShare.ownerOf(_id);\\n        (bool success2, /*return data*/) = payable(recipient).call{value: amount}(\\\"\\\");\\n        assert(success2);\\n        emit Claim(_id, amount, recipient);\\n    }\\n\\n    //getters\\n\\n    function getIdsInThisPool() external view returns(uint[] memory) {\\n      return idsInPool;\\n    }\\n\\n    ///@return the share of the validator rewards climable by `_id`\\n    function getShare(uint _id) external view correctPoolOnly(_id) returns (uint) {\\n        return _getShare(_id);\\n    }\\n\\n    function _getShare(uint _id) internal view returns (uint) {\\n        if (address(this).balance == 0) return 0;\\n        uint frenDep = depositForId[_id];\\n        uint frenPastClaims = frenPastClaim[_id];\\n        uint totFrenRewards = ((frenDep * (address(this).balance + totalClaims)) / totalDeposits);\\n        if (totFrenRewards == 0) return 0;\\n        uint amount = totFrenRewards - frenPastClaims;\\n        return amount;\\n    }\\n\\n    ///@return the share of the validator rewards climable by `_id` minus fees. Returns 0 if pool is still accepting deposits\\n    ///@dev this is used for the traits in the NFT\\n    function getDistributableShare(uint _id) external view returns (uint) {\\n        if (currentState == PoolState.acceptingDeposits) {\\n            return 0;\\n        } else {\\n            uint share = _getShare(_id);\\n            if (feePercent > 0 && currentState != PoolState.exited) {\\n                uint feeAmount = (feePercent * share) / 100;\\n                share = share - feeAmount;\\n            }\\n            return share;\\n        }\\n    }\\n\\n    ///@return pool state\\n    function getState() external view returns (string memory) {\\n        if (currentState == PoolState.awaitingValidatorInfo)\\n            return \\\"awaiting validator info\\\";\\n        if (currentState == PoolState.staked) return \\\"staked\\\";\\n        if (currentState == PoolState.acceptingDeposits)\\n            return \\\"accepting deposits\\\";\\n        if (currentState == PoolState.exited) return \\\"exited\\\";\\n        return \\\"state failure\\\"; //should never happen\\n    }\\n\\n    function owner()\\n        public\\n        view\\n        override(IStakingPool, OwnableUpgradeable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    function _toWithdrawalCred(address a) private pure returns (bytes memory) {\\n        bytes memory withdralDesired = abi.encodePacked(bytes1(0x01), bytes11(0x0), address(a));\\n        return withdralDesired;\\n    }\\n\\n    ///@dev allows pool owner to change the art for the NFTs in the pool\\n    function setArt(IFrensArt newArtContract) external onlyOwner {\\n        IFrensArt newFrensArt = newArtContract;\\n        string memory newArt = newFrensArt.renderTokenById(0);\\n        require(bytes(newArt).length != 0, \\\"invalid art contract\\\");\\n        artForPool = newArtContract;\\n    }\\n\\n    function callSSVNetwork(bytes memory data) external onlyOwner {\\n        address ssvNetwork = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"external.contract.address\\\", \\\"SSVNetwork\\\")));\\n        (bool success, ) = ssvNetwork.call(data);\\n        require(success, \\\"Call failed\\\");\\n    }\\n\\n    function transferToken(address tokenAddress, address to, uint amount) external onlyOwner {\\n        IERC20 token = IERC20(tokenAddress);\\n        token.transfer(to, amount);\\n    }\\n\\n    // to support receiving ETH by default\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0xa606b645339cbd520669bbd0b5f8b29d85432e0bdbca8db91ed50d65ed9f5321\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"\\npragma solidity 0.8.20;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IDepositContract {\\n\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    function get_deposit_count() external view returns (bytes memory);\\n\\n}\\n\",\"keccak256\":\"0x839f7e3c08d72fc538e0889fb75065435242ae3b9d81c839176a8309326775db\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensArt.sol\":{\"content\":\"pragma solidity 0.8.20;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IFrensArt {\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ca4f7eb7011a8f1ed7a6d9a0f88ab68b29d49b63aa8864a694b63d5551a0bad\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensOracle.sol\":{\"content\":\"pragma solidity 0.8.20;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IFrensOracle {\\n\\n   function checkValidatorState(address pool) external returns(bool);\\n\\n   function setExiting(bytes memory pubKey, bool isExiting) external;\\n\\n}\",\"keccak256\":\"0xb8fb907cadbdd9dd146bd3179d385be91b039955df1eb85731afbbed01894e57\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensPoolShare.sol\":{\"content\":\"pragma solidity 0.8.20;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\n\\ninterface IFrensPoolShare is IERC721Enumerable{\\n  \\n  function poolByIds(uint _id) external view returns(address);\\n\\n  function mint(address userAddress) external;\\n\\n  function burn(uint tokenId) external;\\n\\n  function exists(uint _id) external view returns(bool);\\n\\n  function getPoolById(uint _id) external view returns(address);\\n\\n  function tokenURI(uint256 id) external view returns (string memory);\\n\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n\\n}\\n\",\"keccak256\":\"0xef1985c0b95767f7b96d1f21aed9e48142c021d25d574f0615323ec2b83ad996\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensStorage.sol\":{\"content\":\"pragma solidity 0.8.20;\\n\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n//modified from IRocketStorage on 03/12/2022 by 0xWildhare\\n\\ninterface IFrensStorage {\\n\\n   \\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n    function burnKeys() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getBool(bytes32 _key) external view returns (bool);   \\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setBool(bytes32 _key, bool _value) external;    \\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;    \\n\\n    // Arithmetic \\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n    \\n}\\n\",\"keccak256\":\"0xfd293708621d8eb26c25db108d90583d36ab7f4a7f1f71a75e0b6f54c9a0a451\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./IFrensArt.sol\\\";\\nimport \\\"./IFrensStorage.sol\\\";\\n\\ninterface IStakingPool {\\n\\n    function initialize(\\n        address owner_,\\n        bool validatorLocked_,\\n        IFrensStorage frensStorage_) external;\\n\\n    function pubKey() external view returns(bytes memory);\\n\\n    function depositForId(uint _id) external view returns (uint);\\n\\n    function totalDeposits() external view returns(uint);\\n\\n    function transferLocked() external view returns(bool);\\n\\n    function locked(uint id) external view returns(bool);\\n\\n    function artForPool() external view returns (IFrensArt);\\n\\n    function owner() external view returns (address);\\n\\n    function depositToPool() external payable;\\n\\n    function addToDeposit(uint _id) external payable;\\n\\n    function withdraw(uint _id, uint _amount) external;\\n\\n    function claim(uint id) external;\\n\\n    function getIdsInThisPool() external view returns(uint[] memory);\\n\\n    function getShare(uint _id) external view returns (uint);\\n\\n    function getDistributableShare(uint _id) external view returns (uint);\\n\\n    function rageQuitInfo(uint id) external view returns(uint, uint, bool);\\n\\n    function setPubKey(\\n        bytes calldata pubKey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external;\\n\\n    function getState() external view returns (string memory);\\n\\n    // function getDepositAmount(uint _id) external view returns(uint);\\n\\n    function stake(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external;\\n\\n    function stake() external;\\n\\n    function setArt(IFrensArt newArtContract) external;\\n\\n    function callSSVNetwork(bytes memory data) external;\\n\\n}\\n\",\"keccak256\":\"0xcee30eac27ab95cc55787c7458c3ff7ed36057fd12057e5eec29dd9936b6c758\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657612ff9908161001b8239f35b5f80fdfe608080604052600436101561001a575b50361561001857005b005b5f90813560e01c9081630c3f6acf14611f315750806312686aae14611f0b5780631865c57d14611eef5780632cf2cd4814611ec55780632daad61d14611e9b57806330dbf88714611e72578063379607f514611a715780633a4b66f114611a5857806341c6138314611a3a578063441a3e701461182a57806345b58fe414611776578063469048401461174d5780634888a7d114610d975780634b2b4e3614610ce657806351ff484714610cc2578063591167c714610c99578063678e300a14610c7a578063715018a614610c11578063735a531314610acf5780637d88209714610ab15780637fd6f15c14610a935780638620891c146108f2578063888e9cf8146108b95780638ae578fd146108905780638da5cb5b1461085b5780639426e22614610835578063ac2a5dfd14610811578063b45a3c0e146107e2578063cfb5a5f814610745578063e2d9ae3e14610727578063e3f05d8314610704578063e4a50276146106c1578063e6b1a3ae1461058b578063e920eec014610565578063e94ad65b1461053c578063f2fde38b1461050f578063f5537ede1461046a578063f9faa104146102185763fc03bad20361000f5734610215576020366003190112610215576040606091600435815260046020522080549060ff600260018301549201541690604051928352602083015215156040820152f35b80fd5b50806003193601126102155734156104305760ff815416600481101561041c5760016102449114612486565b6102646801bc16d674ec80000061025d600554346124cb565b11156124ec565b600f546040516318160ddd60e01b81526020916001600160a01b039083908390600490829085165afa9182156103c65784926103e9575b50818452600183523460408520556102b5346005546124cb565b600555600754680100000000000000008110156103d557906102de82600187940160075561231a565b81549060031b9085821b915f19901b1916179055828252600284526001604083205560ff60095460081c1660038552604083209060ff801983541691151516179055600f5416803b156103d15781906024604051809481936335313c2160e11b83523360048401525af180156103c65761038e575b507fd91527a40417d48f76ba016aaa9157e2ddaca6cb5b660432901659cb075058fc916060916040519134835233908301526040820152a180f35b91606091936103bd7fd91527a40417d48f76ba016aaa9157e2ddaca6cb5b660432901659cb075058fc94612246565b93915091610353565b6040513d86823e3d90fd5b5080fd5b634e487b7160e01b85526041600452602485fd5b9091508281813d8311610415575b61040181836122a6565b810103126104115751905f61029b565b8380fd5b503d6103f7565b634e487b7160e01b82526021600452602482fd5b60405162461bcd60e51b815260206004820152601260248201527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152606490fd5b503461021557606036600319011261021557610484611fb3565b6001600160a01b039060243582811691908290036104115760446020926104a9612363565b85604051958694859363a9059cbb60e01b8552600485015284356024850152165af18015610504576104d9575080f35b6104f99060203d81116104fd575b6104f181836122a6565b810190612440565b5080f35b503d6104e7565b6040513d84823e3d90fd5b50346102155760203660031901126102155761053961052c611fb3565b610534612363565b61239b565b80f35b50346102155780600319360112610215576012546040516001600160a01b039091168152602090f35b50346102155761053961057736611ffb565b95610586959195949294612363565b6127cb565b5034610215576020806003193601126103d1576004356001600160a01b03811691908290036106bd576105bc612363565b60405163516b636d60e11b8152600481018490528381602481865afa9081156103c657849161063f575b50511561060457506001600160601b0360a01b601054161760105580f35b6064906040519062461bcd60e51b8252600482015260146024820152731a5b9d985b1a5908185c9d0818dbdb9d1c9858dd60621b6044820152fd5b90503d8085833e61065081836122a6565b81019082818303126106b95780519067ffffffffffffffff82116106b5570181601f820112156106b9578051610685816122c8565b9261069360405194856122a6565b8184528482840101116106b5576106af91848085019101611f6d565b5f6105e6565b8580fd5b8480fd5b8280fd5b50346102155780600319360112610215576107006040516106ec816106e5816121c2565b03826122a6565b604051918291602083526020830190611f8e565b0390f35b5034610215578060031936011261021557602060ff600954166040519015158152f35b50346102155780600319360112610215576020600d54604051908152f35b503461021557602036600319011261021557600435602460018060a01b03602081600f541660405193848092631dc82a7560e01b82528760048301525afa9182156103c657916107a6916107ab9493602096926107b3575b5016301461254a565b612d9b565b604051908152f35b6107d4919250863d81116107db575b6107cc81836122a6565b810190612421565b905f61079d565b503d6107c2565b50346102155760203660031901126102155760ff60406020926004358152600384522054166040519015158152f35b50346102155780600319360112610215576107006040516106ec816106e58161209d565b5034610215578060031936011261021557602060ff60095460101c166040519015158152f35b50346102155780600319360112610215575f80516020612f84833981519152546040516001600160a01b039091168152602090f35b50346102155780600319360112610215576010546040516001600160a01b039091168152602090f35b503461021557602036600319011261021557600435906007548210156102155760206108e48361231a565b90546040519160031b1c8152f35b506020806003193601126103d1576004359060ff8354166004811015610a7f57600161091e9114612486565b6109376801bc16d674ec80000061025d600554346124cb565b600f54604051631dc82a7560e01b815260048101849052906001600160a01b039081168383602481845afa928315610a74576024938593610981928992610a5c575016301461254a565b60405192838092634f558e7960e01b82528760048301525afa9081156103c6578491610a3f575b5015610a0757816040917f2e4d11c40e9ddf229c2807835f88a91899498f9e8531757e8489a824b1bdc119938552600181528285206109e83482546124cb565b90556109f6346005546124cb565b60055582519182523490820152a180f35b6064906040519062461bcd60e51b8252600482015260116024820152701a5908191bd95cc81b9bdd08195e1a5cdd607a1b6044820152fd5b610a569150823d84116104fd576104f181836122a6565b5f6109a8565b6107d4919250853d87116107db576107cc81836122a6565b6040513d88823e3d90fd5b634e487b7160e01b84526021600452602484fd5b50346102155780600319360112610215576020600854604051908152f35b50346102155780600319360112610215576020600554604051908152f35b5034610215576020806003193601126103d1578160043567ffffffffffffffff81116103d157366023820112156103d157610b149036906024816004013591016122e4565b610b1c612363565b60018060a01b03601154169083604051818101907865787465726e616c2e636f6e74726163742e6164647265737360381b8252695353564e6574776f726b60b01b603982015260238152610b6f8161228a565b5190206024604051809581936321f8a72160e01b835260048301525afa8015610c065783928391610be9575b50828583519301915af1610bad612d59565b5015610bb7575080f35b6064906040519062461bcd60e51b82526004820152600b60248201526a10d85b1b0819985a5b195960aa1b6044820152fd5b610c009150853d87116107db576107cc81836122a6565b5f610b9b565b6040513d85823e3d90fd5b5034610215578060031936011261021557610c2a612363565b5f80516020612f8483398151915280546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346102155760203660031901126102155760206107ab600435612e0c565b5034610215578060031936011261021557600f546040516001600160a01b039091168152602090f35b50346102155780600319360112610215576107006040516106ec816106e58161213e565b503461021557610cf536611ffb565b959493610d03939193612363565b60095460101c60ff1615610d845750505050610d21925036916122e4565b60208151910120604051610d38816106e58161209d565b6020815191012003610d4d575b6105396125d0565b60405162461bcd60e51b815260206004820152600f60248201526e0e0eac496caf240dad2e6dac2e8c6d608b1b6044820152606490fd5b90919293610d9296956127cb565b610d45565b503461021557606036600319011261021557610db1611fb3565b6024358015158091036106bd57604435916001600160a01b0383168303610411575f80516020612fa4833981519152549167ffffffffffffffff83168015908161173d575b6001149081611733575b15908161172a575b5061171857600167ffffffffffffffff198416175f80516020612fa48339815191525560ff8360401c16156116ec575b6001600160a01b0382161561169557610e4f612458565b610e57612458565b610e608261239b565b6001600160a01b0384161561163c57601180546001600160a01b0319166001600160a01b0386161790556040516f636f6e74726163742e6164647265737360801b6020820181815267119c995b9cd05c9d60c21b6030840152601883529091610ec88161226e565b5190206040516321f8a72160e01b815260048101919091526020816024816001600160a01b038a165afa90811561152557879161161d575b506001600160a01b031680156115c8576001600160601b0360a01b6010541617601055604051602081019182526d4672656e73506f6f6c536861726560901b6030820152601e8152610f518161226e565b5190206040516321f8a72160e01b815260048101919091526020816024816001600160a01b0389165afa908115610a745786916115a9575b5060018060a01b03166001600160601b0360a01b600f541617600f5560405193602085017865787465726e616c2e636f6e74726163742e6164647265737360381b958682526e11195c1bdcda5d10dbdb9d1c9858dd608a1b603982015260288152610ff38161228a565b5190206040516321f8a72160e01b815260048101919091526020816024816001600160a01b0386165afa90811561152557879161158a575b506001600160a01b03168015611530576001600160601b0360a01b60125416176012556040516020810190731c1c9bdd1bd8dbdb0b9999594b9c195c98d95b9d60621b82526014815261107d8161226e565b51902060405163bd02d0f560e01b815260048101919091526020816024816001600160a01b0386165afa80156115255787906114ee575b600a9150806008551161149f57602060405181810190751c1c9bdd1bd8dbdb0b9999594b9c9958da5c1a595b9d60521b8252601681526110f38161226e565b5190206040516321f8a72160e01b8152600481019190915291829060249082906001600160a01b03165afa908115610a74578691611480575b50600e80546001600160a01b0319166001600160a01b03929092169182179055156114295760ff199060ff826009541691168091176009555f1461141c5784541684555b60018060a01b036011541660405160208101908582526729a9ab2a37b5b2b760c11b6039820152602181526111a48161228a565b519020604051906321f8a72160e01b82526004820152602081602481855afa908115610a745786916113fd575b506001600160a01b03169384156113a157602090604051828101918252695353564e6574776f726b60b01b60398201526023815261120e8161228a565b5190206024604051809481936321f8a72160e01b835260048301525afa908115611396578591611377575b506001600160a01b0316801561130c5784936044602092604051968793849263095ea7b360e01b845260048401525f1960248401525af19081156103c65760ff93611289926112ed575b506123cd565b60401c16156112955780f35b68ff0000000000000000195f80516020612fa483398151915254165f80516020612fa4833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b6113059060203d6020116104fd576104f181836122a6565b505f611283565b60405162461bcd60e51b815260206004820152603860248201527f4652454e5320636f6e7472616374206572726f72206e6f20535356206e65747760448201527f6f726b20636f6e747261637420616464726573732073657400000000000000006064820152608490fd5b611390915060203d6020116107db576107cc81836122a6565b5f611239565b6040513d87823e3d90fd5b60405162461bcd60e51b815260206004820152602e60248201527f4652454e5320636f6e7472616374206572726f72206e6f2053535620746f6b6560448201526d1b8818dbdb9d1c9858dd081cd95d60921b6064820152608490fd5b611416915060203d6020116107db576107cc81836122a6565b5f6111d1565b8454166001178455611170565b60405162461bcd60e51b815260206004820152602960248201527f4652454e5320636f6e7472616374206572726f72206e6f2066656520726563696044820152681c1a595b9d081cd95d60ba1b6064820152608490fd5b611499915060203d6020116107db576107cc81836122a6565b5f61112c565b60405162461bcd60e51b815260206004820152602160248201527f4652454e5320636f6e7472616374206572726f722066656520746f6f206869676044820152600d60fb1b6064820152608490fd5b506020813d60201161151d575b81611508602093836122a6565b8101031261151957600a90516110b4565b8680fd5b3d91506114fb565b6040513d89823e3d90fd5b60405162461bcd60e51b815260206004820152602c60248201527f4652454e5320636f6e7472616374206572726f72206e6f204465706f7369742060448201526b18dbdb9d1c9858dd081cd95d60a21b6064820152608490fd5b6115a3915060203d6020116107db576107cc81836122a6565b5f61102b565b6115c2915060203d6020116107db576107cc81836122a6565b5f610f89565b60405162461bcd60e51b815260206004820152602760248201527f4652454e5320636f6e7472616374206572726f72206e6f206172742061646472604482015266195cdcc81cd95d60ca1b6064820152608490fd5b611636915060203d6020116107db576107cc81836122a6565b5f610f00565b60405162461bcd60e51b815260206004820152602b60248201527f4652454e5320636f6e7472616374206572726f72206e6f2073746f726167652060448201526a1859191c995cdcc81cd95d60aa1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602960248201527f4652454e5320636f6e7472616374206572726f72206e6f206f776e6572206164604482015268191c995cdcc81cd95d60ba1b6064820152608490fd5b68ffffffffffffffffff19831668010000000000000001175f80516020612fa483398151915255610e38565b60405163f92ee8a960e01b8152600490fd5b9050155f610e08565b303b159150610e00565b604085901c60ff16159150610df6565b5034610215578060031936011261021557600e546040516001600160a01b039091168152602090f35b503461021557806003193601126102155760405180916007549081835260208093018092600783527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890835b81811061181657505050846117d89103856122a6565b60405193838594850191818652518092526040850193925b8281106117ff57505050500390f35b8351855286955093810193928101926001016117f0565b8254845292860192600192830192016117c2565b503461021557604036600319011261021557600435602490813560ff8454166004811015611a2757600161185e9114612486565b600f546040516331a9108f60e11b808252600482018590526020959290916001600160a01b0391879082908690829086165afa8015611a1c57829189916119ff575b501633036119cb578487526001865283604088205410611990578691869186845260018352604084206118d4878254612d4c565b90556118e286600554612d4c565b600555600f5416936040518095819382528860048301525afa948515611983578180857f71ef96c43343734b1d843bb85d52ef329f5e9143e4d35827771e3b0dd90c5f84986119469683958492611966575b50505af1611940612d59565b50612790565b604080519283526020830191909152339082015280606081015b0390a180f35b61197c9250803d106107db576107cc81836122a6565b5f80611934565b50604051903d90823e3d90fd5b60405162461bcd60e51b815260048101879052601481850152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b60405162461bcd60e51b815260048101879052600d818501526c3737ba103a34329037bbb732b960991b6044820152606490fd5b611a169150883d8a116107db576107cc81836122a6565b5f6118a0565b6040513d8a823e3d90fd5b634e487b7160e01b855260216004528385fd5b50346102155780600319360112610215576020600654604051908152f35b5034610215578060031936011261021557610d45612363565b5034610215576020806003193601126103d157600f54604051631dc82a7560e01b815260048035908201819052916024916001600160a01b0391859082908590829086165afa8015610a7457611ad2918791611e55575b508216301461254a565b60ff8554166004811015611e425760018114611dfe576064471115611dac578593929190600314611da357806011541685604051818101906f636f6e74726163742e6164647265737360801b82526a4672656e734f7261636c6560a81b6030820152601b8152611b418161226e565b51902084604051809481936321f8a72160e01b835260048301525afa80156113965783839188938891611d86575b5060405163404df7b160e11b81523060048201529788938492165af1938415610a74578694611d67575b508380611d3d575b611d2d575b611baf83612d9b565b938387526002865260408720611bc68682546124cb565b9055611bd4856006546124cb565b600655600854908115159081611d24575b50611cb5575b508481600f5416604051938480926331a9108f60e11b82528760048301525afa868115611ca95785611960947fd79254e5daba749baa8ba954e77bbbb18efef113a8070d00df9a188d81932426988394611c80575b5050818080928596611c5796165af1611940612d59565b6040805193845260208401949094526001600160a01b0316928201929092529081906060820190565b611c5794508392611ca08493838594903d106107db576107cc81836122a6565b95509250611c40565b604051903d90823e3d90fd5b611cc485606492969396612d88565b049060018211611ce0575b90611cd991612d4c565b925f611beb565b600e545f198301908616838211611d115788808080611cd9979695611d09955af1611940612d59565b909150611ccf565b634e487b7160e01b895260116004528489fd5b9050155f611be5565b855460ff19166003178655611ba6565b5060ff8654166004811015611d5457600214611ba1565b634e487b7160e01b875260216004528287fd5b611d7f919450853d87116104fd576104f181836122a6565b925f611b99565b611d9d9150843d86116107db576107cc81836122a6565b5f611b6f565b60019350611ba6565b60405162461bcd60e51b8152600481018690526025818501527f6d7573742062652067726561746572207468616e203130302077656920746f20604482015264636c61696d60d81b6064820152608490fd5b60405162461bcd60e51b815260048101869052601c818501527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606490fd5b634e487b7160e01b865260216004528286fd5b611e6c9150863d88116107db576107cc81836122a6565b5f611ac8565b50346102155780600319360112610215576011546040516001600160a01b039091168152602090f35b50346102155760203660031901126102155760406020916004358152600183522054604051908152f35b50346102155760203660031901126102155760406020916004358152600283522054604051908152f35b50346102155780600319360112610215576107006106ec612e81565b5034610215578060031936011261021557602060ff60095460081c166040519015158152f35b9050346103d157816003193601126103d15760ff8254166004811015611f5957602092508152f35b634e487b7160e01b83526021600452602483fd5b5f5b838110611f7e5750505f910152565b8181015183820152602001611f6f565b90602091611fa781518092818552858086019101611f6d565b601f01601f1916010190565b600435906001600160a01b0382168203611fc957565b5f80fd5b9181601f84011215611fc95782359167ffffffffffffffff8311611fc95760208381860195010111611fc957565b906080600319830112611fc95767ffffffffffffffff600435818111611fc9578361202891600401611fcd565b93909392602435838111611fc9578261204391600401611fcd565b93909392604435918211611fc95761205d91600401611fcd565b909160643590565b90600182811c92168015612093575b602083101461207f57565b634e487b7160e01b5f52602260045260245ffd5b91607f1691612074565b600a545f92916120ac82612065565b8082529160019081811690811561212157506001146120ca57505050565b91929350600a5f527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8915f925b84841061210957505060209250010190565b805460208585018101919091529093019281016120f7565b915050602093945060ff929192191683830152151560051b010190565b600c545f929161214d82612065565b80825291600190818116908115612121575060011461216b57505050565b91929350600c5f527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7915f925b8484106121aa57505060209250010190565b80546020858501810191909152909301928101612198565b600b545f92916121d182612065565b8082529160019081811690811561212157506001146121ef57505050565b91929350600b5f527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9915f925b84841061222e57505060209250010190565b8054602085850181019190915290930192810161221c565b67ffffffffffffffff811161225a57604052565b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff82111761225a57604052565b6060810190811067ffffffffffffffff82111761225a57604052565b90601f8019910116810190811067ffffffffffffffff82111761225a57604052565b67ffffffffffffffff811161225a57601f01601f191660200190565b9291926122f0826122c8565b916122fe60405193846122a6565b829481845281830111611fc9578281602093845f960137010152565b60075481101561234f5760075f527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801905f90565b634e487b7160e01b5f52603260045260245ffd5b5f80516020612f84833981519152546001600160a01b0316330361238357565b60405163118cdaa760e01b8152336004820152602490fd5b6001600160a01b038116156123b5576123b3906123cd565b565b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80516020612f8483398151915280546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b90816020910312611fc957516001600160a01b0381168103611fc95790565b90816020910312611fc957518015158103611fc95790565b60ff5f80516020612fa48339815191525460401c161561247457565b604051631afcd79f60e31b8152600490fd5b1561248d57565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b919082018092116124d857565b634e487b7160e01b5f52601160045260245ffd5b156124f357565b60405162461bcd60e51b815260206004820152602960248201527f746f74616c206465706f736974732063616e6e6f74206265206d6f72652074686044820152680c2dc406664408ae8d60bb1b6064820152608490fd5b1561255157565b60405162461bcd60e51b815260206004820152601960248201527f77726f6e67207374616b696e6720706f6f6c20666f72206964000000000000006044820152606490fd5b1561259d57565b60405162461bcd60e51b815260206004820152600b60248201526a77726f6e6720737461746560a81b6044820152606490fd5b6801bc16d674ec80000080471061275a57806005540361271f575f90815460ff81166004811015610a7f5760016126079114612596565b60ff60095460101c16156126e65760ff19166002178255601254600d546001600160a01b0393918416803b156106bd5790829160405180958180946304512a2360e31b8252608060048301526126876126626084840161209d565b61267860031991828682030160248701526121c2565b9084820301604485015261213e565b90606483015203925af1908115611ca95750916040917f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce192936126d7575b50601254168151908152336020820152a1565b6126e090612246565b5f6126c4565b60405162461bcd60e51b81526020600482015260116024820152701d985b1a59185d1bdc881b9bdd081cd95d607a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152726e6f7420656e6f756768206465706f7369747360681b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d0dcdee840cadcdeeaced040cae8d60931b6044820152606490fd5b1561279757565b634e487b7160e01b5f52600160045260245ffd5b908060209392818452848401375f828201840152601f01601f1916010190565b949190939695926040519160209283810190600160f81b82525f918260218301523060601b602c8301528582526128018261226e565b61280c3686866122e4565b8681519101209151902003612d075760095460ff8116612ccd575b5060ff815416906004821015612cb9576128446001809314612596565b67ffffffffffffffff90818911612aaa57612860600a54612065565b9189601f93848111612c55575b5082848211600114612bca578391612bbf575b505f1960038c901b1c19168a851b17600a555b808611612bab576128a5600b54612065565b838111612b49575b508582848211600114612ac9578391612abe575b505f19600388901b1c191686851b17600b555b8711612aaa576128e5600c54612065565b828111612a48575b508091871160011461299f579286807ffd84b86d2e47014cef6e8fc5310d3968b38c5998dd6a57a8b68b350628b8f9f89c9d979461298999979461297b9793612994575b501b905f198760031b1c191617600c555b87600d556201000062ff000019600954161760095561296e6040519a8b9a60808c5260808c01916127ab565b92898403908a01526127ab565b9185830360408701526127ab565b9060608301520390a1565b89013592505f612931565b90601f198716600c83527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7925b818110612a3357509287959261297b9592612989997ffd84b86d2e47014cef6e8fc5310d3968b38c5998dd6a57a8b68b350628b8f9f89e9f999610612a1a575b505085811b01600c55612942565b8801355f19600389901b60f8161c191690555f80612a0c565b8d8301358455928401929187019187016129cc565b600c82527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c783808a0160051c820192898b10612aa1575b0160051c019084905b828110612a965750506128ed565b838155018490612a88565b92508192612a7f565b634e487b7160e01b81526041600452602490fd5b90508501355f6128c1565b600b84527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9915087601f198116855b8b89838310612b325750505010612b19575b50508386811b01600b556128d4565b8601355f19600389901b60f8161c191690555f80612b0a565b858c0135875590950194938401938b935001612af8565b600b83527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db98480890160051c8201928a8a10612ba2575b0160051c019085905b828110612b975750506128ad565b848155018590612b89565b92508192612b80565b634e487b7160e01b82526041600452602482fd5b90508b01355f612880565b8c91601f198116600a86527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8938b8988925b848410612c35575050505010612c1c575b5050838a811b01600a55612893565b8c01355f1960038d901b60f8161c191690555f80612c0d565b8294955095809791929396013581550194019201908d918f898d91612bfc565b600a8452847fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8918a82850160051c84019410612cb0575b0160051c019085905b828110612ca557508b915061286d565b848155018590612c95565b92508192612c8c565b634e487b7160e01b81526021600452602490fd5b81549060ff82166004811015610a7f5760ff60019392612cf0612cfa9315612596565b60101c1615612790565b60ff19161781555f612827565b60405162461bcd60e51b815260048101859052601e60248201527f7769746864726177616c2063726564656e7469616c206d69736d6174636800006044820152606490fd5b919082039182116124d857565b3d15612d83573d90612d6a826122c8565b91612d7860405193846122a6565b82523d5f602084013e565b606090565b818102929181159184041417156124d857565b4715612e07575f908152600160205260408120546002602052612dd0604083205491612dca47600654906124cb565b90612d88565b600554908115612df357048015612dee57612deb9250612d4c565b90565b505090565b634e487b7160e01b84526012600452602484fd5b505f90565b60ff5f5416906004821015612e6d5760018203612e295750505f90565b612e3290612d9b565b90600854908115159081612e61575b50612e4a575090565b906064612e5a82612deb94612d88565b0490612d4c565b6003915014155f612e41565b634e487b7160e01b5f52602160045260245ffd5b60ff5f54166004811015612e6d578015612f495760028114612f265760018114612ef757600314612ed557604051612eb88161226e565b600d81526c7374617465206661696c75726560981b602082015290565b604051612ee18161226e565b6006815265195e1a5d195960d21b602082015290565b50604051612f048161226e565b6012815271616363657074696e67206465706f7369747360701b602082015290565b50604051612f338161226e565b60068152651cdd185ad95960d21b602082015290565b50604051612f568161226e565b601781527f6177616974696e672076616c696461746f7220696e666f00000000000000000060208201529056fe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a26469706673582212203619d6327a8a886fd558c92d5a056eb0fdfb9546394bee7a760ed5695aaca10c64736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001a575b50361561001857005b005b5f90813560e01c9081630c3f6acf14611f315750806312686aae14611f0b5780631865c57d14611eef5780632cf2cd4814611ec55780632daad61d14611e9b57806330dbf88714611e72578063379607f514611a715780633a4b66f114611a5857806341c6138314611a3a578063441a3e701461182a57806345b58fe414611776578063469048401461174d5780634888a7d114610d975780634b2b4e3614610ce657806351ff484714610cc2578063591167c714610c99578063678e300a14610c7a578063715018a614610c11578063735a531314610acf5780637d88209714610ab15780637fd6f15c14610a935780638620891c146108f2578063888e9cf8146108b95780638ae578fd146108905780638da5cb5b1461085b5780639426e22614610835578063ac2a5dfd14610811578063b45a3c0e146107e2578063cfb5a5f814610745578063e2d9ae3e14610727578063e3f05d8314610704578063e4a50276146106c1578063e6b1a3ae1461058b578063e920eec014610565578063e94ad65b1461053c578063f2fde38b1461050f578063f5537ede1461046a578063f9faa104146102185763fc03bad20361000f5734610215576020366003190112610215576040606091600435815260046020522080549060ff600260018301549201541690604051928352602083015215156040820152f35b80fd5b50806003193601126102155734156104305760ff815416600481101561041c5760016102449114612486565b6102646801bc16d674ec80000061025d600554346124cb565b11156124ec565b600f546040516318160ddd60e01b81526020916001600160a01b039083908390600490829085165afa9182156103c65784926103e9575b50818452600183523460408520556102b5346005546124cb565b600555600754680100000000000000008110156103d557906102de82600187940160075561231a565b81549060031b9085821b915f19901b1916179055828252600284526001604083205560ff60095460081c1660038552604083209060ff801983541691151516179055600f5416803b156103d15781906024604051809481936335313c2160e11b83523360048401525af180156103c65761038e575b507fd91527a40417d48f76ba016aaa9157e2ddaca6cb5b660432901659cb075058fc916060916040519134835233908301526040820152a180f35b91606091936103bd7fd91527a40417d48f76ba016aaa9157e2ddaca6cb5b660432901659cb075058fc94612246565b93915091610353565b6040513d86823e3d90fd5b5080fd5b634e487b7160e01b85526041600452602485fd5b9091508281813d8311610415575b61040181836122a6565b810103126104115751905f61029b565b8380fd5b503d6103f7565b634e487b7160e01b82526021600452602482fd5b60405162461bcd60e51b815260206004820152601260248201527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152606490fd5b503461021557606036600319011261021557610484611fb3565b6001600160a01b039060243582811691908290036104115760446020926104a9612363565b85604051958694859363a9059cbb60e01b8552600485015284356024850152165af18015610504576104d9575080f35b6104f99060203d81116104fd575b6104f181836122a6565b810190612440565b5080f35b503d6104e7565b6040513d84823e3d90fd5b50346102155760203660031901126102155761053961052c611fb3565b610534612363565b61239b565b80f35b50346102155780600319360112610215576012546040516001600160a01b039091168152602090f35b50346102155761053961057736611ffb565b95610586959195949294612363565b6127cb565b5034610215576020806003193601126103d1576004356001600160a01b03811691908290036106bd576105bc612363565b60405163516b636d60e11b8152600481018490528381602481865afa9081156103c657849161063f575b50511561060457506001600160601b0360a01b601054161760105580f35b6064906040519062461bcd60e51b8252600482015260146024820152731a5b9d985b1a5908185c9d0818dbdb9d1c9858dd60621b6044820152fd5b90503d8085833e61065081836122a6565b81019082818303126106b95780519067ffffffffffffffff82116106b5570181601f820112156106b9578051610685816122c8565b9261069360405194856122a6565b8184528482840101116106b5576106af91848085019101611f6d565b5f6105e6565b8580fd5b8480fd5b8280fd5b50346102155780600319360112610215576107006040516106ec816106e5816121c2565b03826122a6565b604051918291602083526020830190611f8e565b0390f35b5034610215578060031936011261021557602060ff600954166040519015158152f35b50346102155780600319360112610215576020600d54604051908152f35b503461021557602036600319011261021557600435602460018060a01b03602081600f541660405193848092631dc82a7560e01b82528760048301525afa9182156103c657916107a6916107ab9493602096926107b3575b5016301461254a565b612d9b565b604051908152f35b6107d4919250863d81116107db575b6107cc81836122a6565b810190612421565b905f61079d565b503d6107c2565b50346102155760203660031901126102155760ff60406020926004358152600384522054166040519015158152f35b50346102155780600319360112610215576107006040516106ec816106e58161209d565b5034610215578060031936011261021557602060ff60095460101c166040519015158152f35b50346102155780600319360112610215575f80516020612f84833981519152546040516001600160a01b039091168152602090f35b50346102155780600319360112610215576010546040516001600160a01b039091168152602090f35b503461021557602036600319011261021557600435906007548210156102155760206108e48361231a565b90546040519160031b1c8152f35b506020806003193601126103d1576004359060ff8354166004811015610a7f57600161091e9114612486565b6109376801bc16d674ec80000061025d600554346124cb565b600f54604051631dc82a7560e01b815260048101849052906001600160a01b039081168383602481845afa928315610a74576024938593610981928992610a5c575016301461254a565b60405192838092634f558e7960e01b82528760048301525afa9081156103c6578491610a3f575b5015610a0757816040917f2e4d11c40e9ddf229c2807835f88a91899498f9e8531757e8489a824b1bdc119938552600181528285206109e83482546124cb565b90556109f6346005546124cb565b60055582519182523490820152a180f35b6064906040519062461bcd60e51b8252600482015260116024820152701a5908191bd95cc81b9bdd08195e1a5cdd607a1b6044820152fd5b610a569150823d84116104fd576104f181836122a6565b5f6109a8565b6107d4919250853d87116107db576107cc81836122a6565b6040513d88823e3d90fd5b634e487b7160e01b84526021600452602484fd5b50346102155780600319360112610215576020600854604051908152f35b50346102155780600319360112610215576020600554604051908152f35b5034610215576020806003193601126103d1578160043567ffffffffffffffff81116103d157366023820112156103d157610b149036906024816004013591016122e4565b610b1c612363565b60018060a01b03601154169083604051818101907865787465726e616c2e636f6e74726163742e6164647265737360381b8252695353564e6574776f726b60b01b603982015260238152610b6f8161228a565b5190206024604051809581936321f8a72160e01b835260048301525afa8015610c065783928391610be9575b50828583519301915af1610bad612d59565b5015610bb7575080f35b6064906040519062461bcd60e51b82526004820152600b60248201526a10d85b1b0819985a5b195960aa1b6044820152fd5b610c009150853d87116107db576107cc81836122a6565b5f610b9b565b6040513d85823e3d90fd5b5034610215578060031936011261021557610c2a612363565b5f80516020612f8483398151915280546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346102155760203660031901126102155760206107ab600435612e0c565b5034610215578060031936011261021557600f546040516001600160a01b039091168152602090f35b50346102155780600319360112610215576107006040516106ec816106e58161213e565b503461021557610cf536611ffb565b959493610d03939193612363565b60095460101c60ff1615610d845750505050610d21925036916122e4565b60208151910120604051610d38816106e58161209d565b6020815191012003610d4d575b6105396125d0565b60405162461bcd60e51b815260206004820152600f60248201526e0e0eac496caf240dad2e6dac2e8c6d608b1b6044820152606490fd5b90919293610d9296956127cb565b610d45565b503461021557606036600319011261021557610db1611fb3565b6024358015158091036106bd57604435916001600160a01b0383168303610411575f80516020612fa4833981519152549167ffffffffffffffff83168015908161173d575b6001149081611733575b15908161172a575b5061171857600167ffffffffffffffff198416175f80516020612fa48339815191525560ff8360401c16156116ec575b6001600160a01b0382161561169557610e4f612458565b610e57612458565b610e608261239b565b6001600160a01b0384161561163c57601180546001600160a01b0319166001600160a01b0386161790556040516f636f6e74726163742e6164647265737360801b6020820181815267119c995b9cd05c9d60c21b6030840152601883529091610ec88161226e565b5190206040516321f8a72160e01b815260048101919091526020816024816001600160a01b038a165afa90811561152557879161161d575b506001600160a01b031680156115c8576001600160601b0360a01b6010541617601055604051602081019182526d4672656e73506f6f6c536861726560901b6030820152601e8152610f518161226e565b5190206040516321f8a72160e01b815260048101919091526020816024816001600160a01b0389165afa908115610a745786916115a9575b5060018060a01b03166001600160601b0360a01b600f541617600f5560405193602085017865787465726e616c2e636f6e74726163742e6164647265737360381b958682526e11195c1bdcda5d10dbdb9d1c9858dd608a1b603982015260288152610ff38161228a565b5190206040516321f8a72160e01b815260048101919091526020816024816001600160a01b0386165afa90811561152557879161158a575b506001600160a01b03168015611530576001600160601b0360a01b60125416176012556040516020810190731c1c9bdd1bd8dbdb0b9999594b9c195c98d95b9d60621b82526014815261107d8161226e565b51902060405163bd02d0f560e01b815260048101919091526020816024816001600160a01b0386165afa80156115255787906114ee575b600a9150806008551161149f57602060405181810190751c1c9bdd1bd8dbdb0b9999594b9c9958da5c1a595b9d60521b8252601681526110f38161226e565b5190206040516321f8a72160e01b8152600481019190915291829060249082906001600160a01b03165afa908115610a74578691611480575b50600e80546001600160a01b0319166001600160a01b03929092169182179055156114295760ff199060ff826009541691168091176009555f1461141c5784541684555b60018060a01b036011541660405160208101908582526729a9ab2a37b5b2b760c11b6039820152602181526111a48161228a565b519020604051906321f8a72160e01b82526004820152602081602481855afa908115610a745786916113fd575b506001600160a01b03169384156113a157602090604051828101918252695353564e6574776f726b60b01b60398201526023815261120e8161228a565b5190206024604051809481936321f8a72160e01b835260048301525afa908115611396578591611377575b506001600160a01b0316801561130c5784936044602092604051968793849263095ea7b360e01b845260048401525f1960248401525af19081156103c65760ff93611289926112ed575b506123cd565b60401c16156112955780f35b68ff0000000000000000195f80516020612fa483398151915254165f80516020612fa4833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b6113059060203d6020116104fd576104f181836122a6565b505f611283565b60405162461bcd60e51b815260206004820152603860248201527f4652454e5320636f6e7472616374206572726f72206e6f20535356206e65747760448201527f6f726b20636f6e747261637420616464726573732073657400000000000000006064820152608490fd5b611390915060203d6020116107db576107cc81836122a6565b5f611239565b6040513d87823e3d90fd5b60405162461bcd60e51b815260206004820152602e60248201527f4652454e5320636f6e7472616374206572726f72206e6f2053535620746f6b6560448201526d1b8818dbdb9d1c9858dd081cd95d60921b6064820152608490fd5b611416915060203d6020116107db576107cc81836122a6565b5f6111d1565b8454166001178455611170565b60405162461bcd60e51b815260206004820152602960248201527f4652454e5320636f6e7472616374206572726f72206e6f2066656520726563696044820152681c1a595b9d081cd95d60ba1b6064820152608490fd5b611499915060203d6020116107db576107cc81836122a6565b5f61112c565b60405162461bcd60e51b815260206004820152602160248201527f4652454e5320636f6e7472616374206572726f722066656520746f6f206869676044820152600d60fb1b6064820152608490fd5b506020813d60201161151d575b81611508602093836122a6565b8101031261151957600a90516110b4565b8680fd5b3d91506114fb565b6040513d89823e3d90fd5b60405162461bcd60e51b815260206004820152602c60248201527f4652454e5320636f6e7472616374206572726f72206e6f204465706f7369742060448201526b18dbdb9d1c9858dd081cd95d60a21b6064820152608490fd5b6115a3915060203d6020116107db576107cc81836122a6565b5f61102b565b6115c2915060203d6020116107db576107cc81836122a6565b5f610f89565b60405162461bcd60e51b815260206004820152602760248201527f4652454e5320636f6e7472616374206572726f72206e6f206172742061646472604482015266195cdcc81cd95d60ca1b6064820152608490fd5b611636915060203d6020116107db576107cc81836122a6565b5f610f00565b60405162461bcd60e51b815260206004820152602b60248201527f4652454e5320636f6e7472616374206572726f72206e6f2073746f726167652060448201526a1859191c995cdcc81cd95d60aa1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602960248201527f4652454e5320636f6e7472616374206572726f72206e6f206f776e6572206164604482015268191c995cdcc81cd95d60ba1b6064820152608490fd5b68ffffffffffffffffff19831668010000000000000001175f80516020612fa483398151915255610e38565b60405163f92ee8a960e01b8152600490fd5b9050155f610e08565b303b159150610e00565b604085901c60ff16159150610df6565b5034610215578060031936011261021557600e546040516001600160a01b039091168152602090f35b503461021557806003193601126102155760405180916007549081835260208093018092600783527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890835b81811061181657505050846117d89103856122a6565b60405193838594850191818652518092526040850193925b8281106117ff57505050500390f35b8351855286955093810193928101926001016117f0565b8254845292860192600192830192016117c2565b503461021557604036600319011261021557600435602490813560ff8454166004811015611a2757600161185e9114612486565b600f546040516331a9108f60e11b808252600482018590526020959290916001600160a01b0391879082908690829086165afa8015611a1c57829189916119ff575b501633036119cb578487526001865283604088205410611990578691869186845260018352604084206118d4878254612d4c565b90556118e286600554612d4c565b600555600f5416936040518095819382528860048301525afa948515611983578180857f71ef96c43343734b1d843bb85d52ef329f5e9143e4d35827771e3b0dd90c5f84986119469683958492611966575b50505af1611940612d59565b50612790565b604080519283526020830191909152339082015280606081015b0390a180f35b61197c9250803d106107db576107cc81836122a6565b5f80611934565b50604051903d90823e3d90fd5b60405162461bcd60e51b815260048101879052601481850152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b60405162461bcd60e51b815260048101879052600d818501526c3737ba103a34329037bbb732b960991b6044820152606490fd5b611a169150883d8a116107db576107cc81836122a6565b5f6118a0565b6040513d8a823e3d90fd5b634e487b7160e01b855260216004528385fd5b50346102155780600319360112610215576020600654604051908152f35b5034610215578060031936011261021557610d45612363565b5034610215576020806003193601126103d157600f54604051631dc82a7560e01b815260048035908201819052916024916001600160a01b0391859082908590829086165afa8015610a7457611ad2918791611e55575b508216301461254a565b60ff8554166004811015611e425760018114611dfe576064471115611dac578593929190600314611da357806011541685604051818101906f636f6e74726163742e6164647265737360801b82526a4672656e734f7261636c6560a81b6030820152601b8152611b418161226e565b51902084604051809481936321f8a72160e01b835260048301525afa80156113965783839188938891611d86575b5060405163404df7b160e11b81523060048201529788938492165af1938415610a74578694611d67575b508380611d3d575b611d2d575b611baf83612d9b565b938387526002865260408720611bc68682546124cb565b9055611bd4856006546124cb565b600655600854908115159081611d24575b50611cb5575b508481600f5416604051938480926331a9108f60e11b82528760048301525afa868115611ca95785611960947fd79254e5daba749baa8ba954e77bbbb18efef113a8070d00df9a188d81932426988394611c80575b5050818080928596611c5796165af1611940612d59565b6040805193845260208401949094526001600160a01b0316928201929092529081906060820190565b611c5794508392611ca08493838594903d106107db576107cc81836122a6565b95509250611c40565b604051903d90823e3d90fd5b611cc485606492969396612d88565b049060018211611ce0575b90611cd991612d4c565b925f611beb565b600e545f198301908616838211611d115788808080611cd9979695611d09955af1611940612d59565b909150611ccf565b634e487b7160e01b895260116004528489fd5b9050155f611be5565b855460ff19166003178655611ba6565b5060ff8654166004811015611d5457600214611ba1565b634e487b7160e01b875260216004528287fd5b611d7f919450853d87116104fd576104f181836122a6565b925f611b99565b611d9d9150843d86116107db576107cc81836122a6565b5f611b6f565b60019350611ba6565b60405162461bcd60e51b8152600481018690526025818501527f6d7573742062652067726561746572207468616e203130302077656920746f20604482015264636c61696d60d81b6064820152608490fd5b60405162461bcd60e51b815260048101869052601c818501527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606490fd5b634e487b7160e01b865260216004528286fd5b611e6c9150863d88116107db576107cc81836122a6565b5f611ac8565b50346102155780600319360112610215576011546040516001600160a01b039091168152602090f35b50346102155760203660031901126102155760406020916004358152600183522054604051908152f35b50346102155760203660031901126102155760406020916004358152600283522054604051908152f35b50346102155780600319360112610215576107006106ec612e81565b5034610215578060031936011261021557602060ff60095460081c166040519015158152f35b9050346103d157816003193601126103d15760ff8254166004811015611f5957602092508152f35b634e487b7160e01b83526021600452602483fd5b5f5b838110611f7e5750505f910152565b8181015183820152602001611f6f565b90602091611fa781518092818552858086019101611f6d565b601f01601f1916010190565b600435906001600160a01b0382168203611fc957565b5f80fd5b9181601f84011215611fc95782359167ffffffffffffffff8311611fc95760208381860195010111611fc957565b906080600319830112611fc95767ffffffffffffffff600435818111611fc9578361202891600401611fcd565b93909392602435838111611fc9578261204391600401611fcd565b93909392604435918211611fc95761205d91600401611fcd565b909160643590565b90600182811c92168015612093575b602083101461207f57565b634e487b7160e01b5f52602260045260245ffd5b91607f1691612074565b600a545f92916120ac82612065565b8082529160019081811690811561212157506001146120ca57505050565b91929350600a5f527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8915f925b84841061210957505060209250010190565b805460208585018101919091529093019281016120f7565b915050602093945060ff929192191683830152151560051b010190565b600c545f929161214d82612065565b80825291600190818116908115612121575060011461216b57505050565b91929350600c5f527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7915f925b8484106121aa57505060209250010190565b80546020858501810191909152909301928101612198565b600b545f92916121d182612065565b8082529160019081811690811561212157506001146121ef57505050565b91929350600b5f527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9915f925b84841061222e57505060209250010190565b8054602085850181019190915290930192810161221c565b67ffffffffffffffff811161225a57604052565b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff82111761225a57604052565b6060810190811067ffffffffffffffff82111761225a57604052565b90601f8019910116810190811067ffffffffffffffff82111761225a57604052565b67ffffffffffffffff811161225a57601f01601f191660200190565b9291926122f0826122c8565b916122fe60405193846122a6565b829481845281830111611fc9578281602093845f960137010152565b60075481101561234f5760075f527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801905f90565b634e487b7160e01b5f52603260045260245ffd5b5f80516020612f84833981519152546001600160a01b0316330361238357565b60405163118cdaa760e01b8152336004820152602490fd5b6001600160a01b038116156123b5576123b3906123cd565b565b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80516020612f8483398151915280546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b90816020910312611fc957516001600160a01b0381168103611fc95790565b90816020910312611fc957518015158103611fc95790565b60ff5f80516020612fa48339815191525460401c161561247457565b604051631afcd79f60e31b8152600490fd5b1561248d57565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b919082018092116124d857565b634e487b7160e01b5f52601160045260245ffd5b156124f357565b60405162461bcd60e51b815260206004820152602960248201527f746f74616c206465706f736974732063616e6e6f74206265206d6f72652074686044820152680c2dc406664408ae8d60bb1b6064820152608490fd5b1561255157565b60405162461bcd60e51b815260206004820152601960248201527f77726f6e67207374616b696e6720706f6f6c20666f72206964000000000000006044820152606490fd5b1561259d57565b60405162461bcd60e51b815260206004820152600b60248201526a77726f6e6720737461746560a81b6044820152606490fd5b6801bc16d674ec80000080471061275a57806005540361271f575f90815460ff81166004811015610a7f5760016126079114612596565b60ff60095460101c16156126e65760ff19166002178255601254600d546001600160a01b0393918416803b156106bd5790829160405180958180946304512a2360e31b8252608060048301526126876126626084840161209d565b61267860031991828682030160248701526121c2565b9084820301604485015261213e565b90606483015203925af1908115611ca95750916040917f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce192936126d7575b50601254168151908152336020820152a1565b6126e090612246565b5f6126c4565b60405162461bcd60e51b81526020600482015260116024820152701d985b1a59185d1bdc881b9bdd081cd95d607a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152726e6f7420656e6f756768206465706f7369747360681b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d0dcdee840cadcdeeaced040cae8d60931b6044820152606490fd5b1561279757565b634e487b7160e01b5f52600160045260245ffd5b908060209392818452848401375f828201840152601f01601f1916010190565b949190939695926040519160209283810190600160f81b82525f918260218301523060601b602c8301528582526128018261226e565b61280c3686866122e4565b8681519101209151902003612d075760095460ff8116612ccd575b5060ff815416906004821015612cb9576128446001809314612596565b67ffffffffffffffff90818911612aaa57612860600a54612065565b9189601f93848111612c55575b5082848211600114612bca578391612bbf575b505f1960038c901b1c19168a851b17600a555b808611612bab576128a5600b54612065565b838111612b49575b508582848211600114612ac9578391612abe575b505f19600388901b1c191686851b17600b555b8711612aaa576128e5600c54612065565b828111612a48575b508091871160011461299f579286807ffd84b86d2e47014cef6e8fc5310d3968b38c5998dd6a57a8b68b350628b8f9f89c9d979461298999979461297b9793612994575b501b905f198760031b1c191617600c555b87600d556201000062ff000019600954161760095561296e6040519a8b9a60808c5260808c01916127ab565b92898403908a01526127ab565b9185830360408701526127ab565b9060608301520390a1565b89013592505f612931565b90601f198716600c83527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7925b818110612a3357509287959261297b9592612989997ffd84b86d2e47014cef6e8fc5310d3968b38c5998dd6a57a8b68b350628b8f9f89e9f999610612a1a575b505085811b01600c55612942565b8801355f19600389901b60f8161c191690555f80612a0c565b8d8301358455928401929187019187016129cc565b600c82527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c783808a0160051c820192898b10612aa1575b0160051c019084905b828110612a965750506128ed565b838155018490612a88565b92508192612a7f565b634e487b7160e01b81526041600452602490fd5b90508501355f6128c1565b600b84527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9915087601f198116855b8b89838310612b325750505010612b19575b50508386811b01600b556128d4565b8601355f19600389901b60f8161c191690555f80612b0a565b858c0135875590950194938401938b935001612af8565b600b83527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db98480890160051c8201928a8a10612ba2575b0160051c019085905b828110612b975750506128ad565b848155018590612b89565b92508192612b80565b634e487b7160e01b82526041600452602482fd5b90508b01355f612880565b8c91601f198116600a86527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8938b8988925b848410612c35575050505010612c1c575b5050838a811b01600a55612893565b8c01355f1960038d901b60f8161c191690555f80612c0d565b8294955095809791929396013581550194019201908d918f898d91612bfc565b600a8452847fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8918a82850160051c84019410612cb0575b0160051c019085905b828110612ca557508b915061286d565b848155018590612c95565b92508192612c8c565b634e487b7160e01b81526021600452602490fd5b81549060ff82166004811015610a7f5760ff60019392612cf0612cfa9315612596565b60101c1615612790565b60ff19161781555f612827565b60405162461bcd60e51b815260048101859052601e60248201527f7769746864726177616c2063726564656e7469616c206d69736d6174636800006044820152606490fd5b919082039182116124d857565b3d15612d83573d90612d6a826122c8565b91612d7860405193846122a6565b82523d5f602084013e565b606090565b818102929181159184041417156124d857565b4715612e07575f908152600160205260408120546002602052612dd0604083205491612dca47600654906124cb565b90612d88565b600554908115612df357048015612dee57612deb9250612d4c565b90565b505090565b634e487b7160e01b84526012600452602484fd5b505f90565b60ff5f5416906004821015612e6d5760018203612e295750505f90565b612e3290612d9b565b90600854908115159081612e61575b50612e4a575090565b906064612e5a82612deb94612d88565b0490612d4c565b6003915014155f612e41565b634e487b7160e01b5f52602160045260245ffd5b60ff5f54166004811015612e6d578015612f495760028114612f265760018114612ef757600314612ed557604051612eb88161226e565b600d81526c7374617465206661696c75726560981b602082015290565b604051612ee18161226e565b6006815265195e1a5d195960d21b602082015290565b50604051612f048161226e565b6012815271616363657074696e67206465706f7369747360701b602082015290565b50604051612f338161226e565b60068152651cdd185ad95960d21b602082015290565b50604051612f568161226e565b601781527f6177616974696e672076616c696461746f7220696e666f00000000000000000060208201529056fe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a26469706673582212203619d6327a8a886fd558c92d5a056eb0fdfb9546394bee7a760ed5695aaca10c64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "addToDeposit(uint256)": {
        "details": "recieves funds and increases deposit for a FrensPoolShare ID"
      },
      "claim(uint256)": {
        "details": "calculates the rewards due to `_id` and sends them to the owner of `_id`"
      },
      "depositToPool()": {
        "details": "recieves funds and returns FrenspoolShare NFT"
      },
      "getDistributableShare(uint256)": {
        "details": "this is used for the traits in the NFT",
        "returns": {
          "_0": "the share of the validator rewards climable by `_id` minus fees. Returns 0 if pool is still accepting deposits"
        }
      },
      "getShare(uint256)": {
        "returns": {
          "_0": "the share of the validator rewards climable by `_id`"
        }
      },
      "getState()": {
        "returns": {
          "_0": "pool state"
        }
      },
      "initialize(address,bool,address)": {
        "details": "when the pool is initalised by the factory, the owner, art contract,  storage contract, and if the validator is locked are all set.  The pool state is set according to whether or not the validator is locked."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setArt(address)": {
        "details": "allows pool owner to change the art for the NFTs in the pool"
      },
      "setPubKey(bytes,bytes,bytes,bytes32)": {
        "details": "sets the validator info required when depositing to the deposit contract"
      },
      "stake()": {
        "details": "stakes 32 ETH from this pool to the deposit contract. validator info must already be entered"
      },
      "stake(bytes,bytes,bytes,bytes32)": {
        "details": "stakes 32 ETH from this pool to the deposit contract, accepts validator info"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256,uint256)": {
        "details": "allows user to withdraw funds if they have not yet been deposited to the deposit contract with the Stake method"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToDeposit(uint256)": {
        "notice": "allows a user to add funds to an existing NFT ID"
      },
      "claim(uint256)": {
        "notice": "allows user to claim their portion of the rewards"
      },
      "depositToPool()": {
        "notice": "This allows a user to deposit funds to the pool, and recieve an NFT representing their share"
      },
      "withdraw(uint256,uint256)": {
        "notice": "To withdraw funds previously deposited - ONLY works before the funds are staked. Use Claim to get rewards."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5734,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "currentState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(PoolState)5731"
      },
      {
        "astId": 5745,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "depositForId",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5749,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "frenPastClaim",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5753,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "locked",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 5758,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "rageQuitInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(RageQuit)5741_storage)"
      },
      {
        "astId": 5760,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5762,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "totalClaims",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5765,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "idsInPool",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 5767,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "feePercent",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5769,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "validatorLocked",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 5771,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "transferLocked",
        "offset": 1,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 5773,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "validatorSet",
        "offset": 2,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 5775,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "pubKey",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes_storage"
      },
      {
        "astId": 5777,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "withdrawal_credentials",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes_storage"
      },
      {
        "astId": 5779,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "signature",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes_storage"
      },
      {
        "astId": 5781,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "deposit_data_root",
        "offset": 0,
        "slot": "13",
        "type": "t_bytes32"
      },
      {
        "astId": 5783,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 5786,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "frensPoolShare",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IFrensPoolShare)7325"
      },
      {
        "astId": 5789,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "artForPool",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IFrensArt)7216"
      },
      {
        "astId": 5792,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "frensStorage",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IFrensStorage)7425"
      },
      {
        "astId": 5795,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "depositContract",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IDepositContract)7069"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IDepositContract)7069": {
        "encoding": "inplace",
        "label": "contract IDepositContract",
        "numberOfBytes": "20"
      },
      "t_contract(IFrensArt)7216": {
        "encoding": "inplace",
        "label": "contract IFrensArt",
        "numberOfBytes": "20"
      },
      "t_contract(IFrensPoolShare)7325": {
        "encoding": "inplace",
        "label": "contract IFrensPoolShare",
        "numberOfBytes": "20"
      },
      "t_contract(IFrensStorage)7425": {
        "encoding": "inplace",
        "label": "contract IFrensStorage",
        "numberOfBytes": "20"
      },
      "t_enum(PoolState)5731": {
        "encoding": "inplace",
        "label": "enum StakingPool.PoolState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(RageQuit)5741_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StakingPool.RageQuit)",
        "numberOfBytes": "32",
        "value": "t_struct(RageQuit)5741_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RageQuit)5741_storage": {
        "encoding": "inplace",
        "label": "struct StakingPool.RageQuit",
        "members": [
          {
            "astId": 5736,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5738,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "time",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5740,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "rageQuitting",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}